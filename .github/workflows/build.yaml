name: Build for All Platforms

on:
  workflow_dispatch:
    inputs:
      app_name:
        description: 'Name of the application'
        type: string
        # Change the built app name if necessary.
        default: 'ShortcamLite'
      tag_name:
        description: |
          Tag name for the release. 
          You could input 'date' to use current date.
          Or 'pubspec' to use the project version. 
          Or manually input.
        required: true
        type: string
        default: 'date'
      repository:
        description: 'The repository to create the release in (e.g., owner/repo). Input "self" to use the current repository.'
        type: string
        # Change to your target repo if necessary.
        default: 'self'
        required: true
      token_secret_name:
        description: 'Name of the GitHub token secret (e.g., MY_CUSTOM_TOKEN). Input "self" to use the default GITHUB_TOKEN.'
        type: string
        # Add the token to the workflows repo secret for your target repo.
        # Go to Repo -> Settings -> Secret and Variables -> Actions -> Secrets -> New Repository Secret
        # Need "Public Repo" permission checked when creating the Personal Access Token classic in target repo.
        default: 'self'
      linux:
        description: 'Build for Linux'
        type: boolean
        default: true
      windows:
        description: 'Build for Windows'
        type: boolean
        default: true
      macos:
        description: 'Build for macOS'
        type: boolean
        default: true
      ios:
        description: 'Build for iOS'
        type: boolean
        default: true
      android:
        description: 'Build for Android'
        type: boolean
        default: true
      web:
        description: 'Build for Web'
        type: boolean
        default: true

permissions:
  contents: write

jobs:
  setup:
    runs-on: ubuntu-latest
    outputs:
      platforms: ${{ steps.set-platforms.outputs.platforms }}
    steps:
      - name: Set up platforms matrix
        id: set-platforms
        run: |
          PLATFORMS=()
          if ${{ github.event.inputs.linux == 'true' }}; then
            PLATFORMS+=('{"name": "linux", "runner": "ubuntu-latest"}')
          fi
          if ${{ github.event.inputs.windows == 'true' }}; then
            PLATFORMS+=('{"name": "windows", "runner": "windows-latest"}')
          fi
          if ${{ github.event.inputs.macos == 'true' }}; then
            PLATFORMS+=('{"name": "macos", "runner": "macos-latest"}')
          fi
          if ${{ github.event.inputs.ios == 'true' }}; then
            PLATFORMS+=('{"name": "ios", "runner": "macos-latest"}')
          fi
          if ${{ github.event.inputs.android == 'true' }}; then
            PLATFORMS+=('{"name": "android", "runner": "ubuntu-latest"}')
          fi
          if ${{ github.event.inputs.web == 'true' }}; then
            PLATFORMS+=('{"name": "web", "runner": "ubuntu-latest"}')
          fi
          echo "platforms=[$(IFS=,; echo "${PLATFORMS[*]}")]" >> $GITHUB_OUTPUT
          echo "platforms=[$(IFS=,; echo "${PLATFORMS[*]}")]"

  get_version:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.extract_version.outputs.version }}
    steps:
      - name: Clone repository
        uses: actions/checkout@v4

      - name: Extract version from pubspec.yaml
        id: extract_version
        run: |
          VERSION=$( grep 'version:' pubspec.yaml | awk '{print $2}' | tr -d '"' | awk -F'+' '{print $1}')
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "version=$VERSION"

  build:
    needs: setup
    strategy:
      matrix:
        platform: ${{ fromJSON(needs.setup.outputs.platforms) }}
    runs-on: ${{ matrix.platform.runner }}
    name: Build for ${{ matrix.platform.name }}

    steps:
      - name: Clone repository
        uses: actions/checkout@v4

      - name: Set up Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: stable
          flutter-version: 3.27.2

      - name: Application Name
        id: application_name
        run: |
          $application_name = "${{ github.event.inputs.app_name }}"
          echo "name=$application_name" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf8 -Append
        shell: pwsh

      - name: Install dependencies
        run: flutter pub get

      - name: Set up platform-specific dependencies
        if: matrix.platform.name == 'linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y clang cmake ninja-build pkg-config libgtk-3-dev

      - name: Build for ${{ matrix.platform.name }}
        run: |
          $platform = "${{ matrix.platform.name }}"
          $application_name = "${{ steps.application_name.outputs.name }}"
          if ($platform -eq "linux") {
            flutter build linux --release
            mkdir -p release
            tar -czvf release/${application_name}.linux.tar.gz -C build/linux/x64/release/bundle .
          } elseif ($platform -eq "windows") {
            flutter build windows --release
            mkdir release
            Compress-Archive -Path build\windows\x64\runner\Release\* -DestinationPath "release\${application_name}.windows.zip"
          } elseif ($platform -eq "macos") {
            flutter build macos --release
            brew install create-dmg
            create-dmg build/macos/Build/Products/Release/${application_name}.dmg build/macos/Build/Products/Release/${application_name}.app
            mkdir -p release
            mv build/macos/Build/Products/Release/${application_name}.dmg release/${application_name}.macos.dmg
          } elseif ($platform -eq "ios") {
            flutter build ios --release --no-codesign
            mkdir -p release
            mkdir -p Payload
            mv build/ios/iphoneos/Runner.app Payload/
            zip -qq -r -9 release/${application_name}.ios.unsigned.ipa Payload
          } elseif ($platform -eq "android") {
            flutter build apk --release
            mkdir -p release
            mv build/app/outputs/flutter-apk/app-release.apk release/${application_name}.android.apk
          } elseif ($platform -eq "web") {
            flutter build web --release
            mkdir -p release
            tar -czvf release/${application_name}.web.tar.gz -C build/web .
          }
        shell: pwsh

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.platform.name }}_artifacts
          path: release/*

      - name: List uploaded artifacts
        run: ls -R release/

  release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [build, get_version]
    steps:
      - name: Clone repository
        uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: List downloaded artifacts
        run: ls -R artifacts

      - name: Determine tag name
        id: determine_tag
        run: |
          if [[ "${{ github.event.inputs.tag_name }}" == "pubspec" ]]; then
            TAG_NAME="${{ needs.get_version.outputs.version }}"
          elif [[ "${{ github.event.inputs.tag_name }}" == "date" ]]; then
            TAG_NAME=$(date +'%Y%m%d%H%M%S')
          else
            TAG_NAME="${{ github.event.inputs.tag_name }}"
          fi
          echo "tag=$TAG_NAME" >> $GITHUB_OUTPUT
          echo "tag=$TAG_NAME"

      - name: Create Git tag
        id: tag
        run: |
          TAG_NAME="${{ steps.determine_tag.outputs.tag }}"
          git tag $TAG_NAME
          git push origin $TAG_NAME

      - name: Prepare release description
        id: prepare_release_description
        run: |
          RELEASE_DESCRIPTION="${{ github.event.inputs.release_description }}"
          if ${{ github.event.inputs.ios == 'true' }}; then
            RELEASE_DESCRIPTION="$RELEASE_DESCRIPTION<br><br>**Note:**<br>The iOS build is an unsigned IPA and cannot be installed directly on the device.<br>You need to sign it first using an Apple Developer ID,<br>or use something like https://sideloadly.io."
          fi
          echo "release_description=$RELEASE_DESCRIPTION" >> $GITHUB_OUTPUT
          echo "release_description=$RELEASE_DESCRIPTION"

      - name: Determine target repository
        id: determine_repository
        run: |
          if [[ "${{ github.event.inputs.repository }}" == "self" ]]; then
            REPOSITORY="${{ github.repository }}"
          else
            REPOSITORY="${{ github.event.inputs.repository }}"
          fi
          echo "repository=$REPOSITORY" >> $GITHUB_OUTPUT
          echo "repository=$REPOSITORY"

      - name: Determine GitHub token
        id: determine_token
        run: |
          if [[ "${{ github.event.inputs.token_secret_name }}" == "self" ]]; then
            TOKEN="${{ secrets.GITHUB_TOKEN }}"
          else
            TOKEN="${{ secrets[github.event.inputs.token_secret_name] }}"
          fi
          echo "token=$TOKEN" >> $GITHUB_OUTPUT
          echo "token=$TOKEN"

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.determine_tag.outputs.tag }}
          body: ${{ steps.prepare_release_description.outputs.release_description }}
          files: |
            artifacts/**/*
          repository: ${{ steps.determine_repository.outputs.repository }}
        env:
          GITHUB_TOKEN: ${{ steps.determine_token.outputs.token }}
